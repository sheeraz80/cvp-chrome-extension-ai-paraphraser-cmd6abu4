var o=Object.defineProperty;var l=(t,e,s)=>e in t?o(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s;var i=(t,e,s)=>l(t,typeof e!="symbol"?e+"":e,s);class d{constructor(){i(this,"isMonitoring",!1)}start(){this.isMonitoring||(this.isMonitoring=!0,this.setupNetworkListeners())}stop(){this.isMonitoring=!1}async resetForTab(e){const s={type:"CLEAR_REQUESTS",tabId:e,timestamp:Date.now()};await chrome.tabs.sendMessage(e,s)}setupNetworkListeners(){this.setupNetworkRules()}async setupNetworkRules(){const e=[{id:1,priority:1,condition:{urlFilter:"*",resourceTypes:["xmlhttprequest","fetch"]},action:{type:"allow"}}];await chrome.declarativeNetRequest.updateDynamicRules({addRules:e,removeRuleIds:[]})}}class c{async handle(e,s){switch(e.type){case"GET_SETTINGS":return await this.getSettings();case"UPDATE_SETTINGS":return await this.updateSettings(e.data);case"GET_REQUESTS":return await this.getRequests(e.tabId);default:return{error:"Unknown message type"}}}async getSettings(){const{settings:e}=await chrome.storage.local.get("settings");return{settings:e}}async updateSettings(e){return await chrome.storage.local.set({settings:e}),{success:!0}}async getRequests(e){return{requests:[]}}}var r=(t=>(t.NETWORK_REQUEST="network_request",t.TOGGLE_OVERLAY="toggle_overlay",t.EXPORT_DATA="export_data",t.UPDATE_SETTINGS="update_settings",t.GET_REQUESTS="get_requests",t.CLEAR_REQUESTS="clear_requests",t))(r||{});class h{constructor(){i(this,"networkMonitor");i(this,"messageHandler");this.networkMonitor=new d,this.messageHandler=new c,this.setupEventListeners()}setupEventListeners(){chrome.runtime.onInstalled.addListener(this.handleInstalled.bind(this)),chrome.tabs.onUpdated.addListener(this.handleTabUpdated.bind(this)),chrome.runtime.onMessage.addListener(this.handleMessage.bind(this)),chrome.action.onClicked.addListener(this.handleActionClick.bind(this))}async handleInstalled(e){e.reason==="install"&&await this.initializeExtension()}async initializeExtension(){await chrome.storage.local.set({settings:{overlayPosition:{x:20,y:20},overlaySize:{width:400,height:600},autoHide:!1,maxRequestHistory:1e3,theme:"auto"}}),this.networkMonitor.start()}async handleTabUpdated(e,s,a){s.status==="loading"&&a.url&&await this.networkMonitor.resetForTab(e)}async handleMessage(e,s,a){try{const n=await this.messageHandler.handle(e,s);a(n)}catch(n){console.error("Error handling message:",n),a({error:n.message})}}async handleActionClick(e){if(e.id){const s={type:r.TOGGLE_OVERLAY,timestamp:Date.now()};await chrome.tabs.sendMessage(e.id,s)}}}new h;
